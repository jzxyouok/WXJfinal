package me.a186.mvc.model;

import me.a186.dto.SplitPage;
import me.a186.mvc.base.BaseModelCache;
import me.a186.mvc.model.base.BaseUser;
import me.a186.plugin.ParamInitPlugin;
import me.a186.tools.ToolCache;

import java.sql.Timestamp;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> implements BaseModelCache<User> {
    public static final User dao = new User();

    /**
     * sqlId : user.splitPageSelect
     * 描述：分页Select
     */
    public static final String sqlId_splitPageSelect = "user.splitPageSelect";

    /**
     * sqlId : platform.user.splitPageFrom
     * 描述：分页from
     */
    public static final String sqlId_splitPageFrom = "user.splitPageFrom";

    /**
     * 根据用户名查询
     */
    public static final String sqlId_selectByUserName = "user.selectByUserName";


    /**
     * 查询用户拥有权限
     */
    public static final String sqlId_getAuthList = "user.getAuthList";

    /**
     * 分页查询
     *
     * @param start
     * @param end
     * @return
     */
    public List<User> paging(long start, long end) {
        return User.dao.find("select * from t_user order by ids limit ? offset ?", start, end);
    }

    /**
     * 根据用户名查询
     *
     * @param username
     * @return
     */
    public User findByUsername(String username) {
        List<User> users = User.dao.find("select * from t_user where username = ?", username);
        if (users.size() != 1) {
            return null;
        }
        return users.get(0);
    }

    /**
     * 启用停用账户
     *
     * @param ids
     * @return
     */
    public boolean start(String ids) {
        boolean start = User.dao.findById(ids).set("stopdate", null).set("errorcount", 0).update();
        return start;
    }

    /**
     * 停用账户
     *
     * @param stopDate
     * @param errorCount
     * @param ids
     * @return
     */
    public boolean stop(Timestamp stopDate, long errorCount, String ids) {
        boolean stop = User.dao.findById(ids).set("stopdate", stopDate).set("errorcount", errorCount).update();
        return stop;
    }

    /**
     * 添加或者更新缓存
     *
     * @param ids
     */
    @Override
    public void cacheAdd(String ids) {
        User user = User.dao.findById(ids);

        ToolCache.set(ParamInitPlugin.cacheStart_user + ids, user);
        ToolCache.set(ParamInitPlugin.cacheStart_user + user.getUsername(), user);
    }

    @Override
    public void cacheRemove(String ids) {
        User user = User.dao.cacheGet(ids);
        ToolCache.remove(ParamInitPlugin.cacheStart_user + ids);
        ToolCache.remove(ParamInitPlugin.cacheStart_user + user.getUsername());

    }

    /**
     * 获取缓存
     *
     * @param ids
     * @return
     */
    @Override
    public User cacheGet(String ids) {
        User user = ToolCache.get(ParamInitPlugin.cacheStart_user + ids);
        return user;
    }
}
